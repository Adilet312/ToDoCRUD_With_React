{"ast":null,"code":"var _jsxFileName = \"/home/amt/Desktop/ToDoCRUD_With_React/crud-with-react/src/components/App.js\";\nimport React from \"react\";\nimport \"./css/to-do-list-css.css\";\nexport default class App extends React.Component {\n  constructor() {\n    super();\n\n    this.inputData = event => this.setState({\n      newtask: event.target.value\n    });\n\n    this.addTask = () => {\n      let tempList = [];\n      tempList = this.state.list;\n      let temptask = {\n        task: this.state.newtask,\n        iscomplete: false,\n        update: false\n      };\n      tempList.push(temptask);\n      this.setState({\n        list: tempList\n      });\n      this.setState({\n        temp: tempList\n      });\n      this.setState({\n        newtask: \"\"\n      });\n    };\n\n    this.deleteTask = givenIndex => {\n      let tempList = [];\n      tempList = this.state.list;\n      tempList.splice(givenIndex, 1);\n      this.setState({\n        list: tempList\n      });\n      this.setState({\n        temp: tempList\n      });\n    };\n\n    this.changeLinkColor = givenLinks => this.setState({\n      show: givenLinks\n    });\n\n    this.isComplete = givenIndex => {\n      let tempList = [];\n      tempList = this.state.list;\n      tempList[givenIndex].iscomplete = !tempList[givenIndex].iscomplete;\n      this.setState({\n        list: tempList\n      });\n      this.setState({\n        temp: tempList\n      });\n    };\n\n    this.showAll = () => {\n      this.setState({\n        temp: this.state.list\n      });\n    };\n\n    this.showActive = () => {\n      let tempList = [];\n      tempList = this.state.list;\n      tempList = tempList.filter(element => element.iscomplete !== true);\n      this.setState({\n        temp: tempList\n      });\n    };\n\n    this.showCompleted = () => {\n      let tempList = [];\n      tempList = this.state.list;\n      tempList = tempList.filter(element => element.iscomplete !== false);\n      this.setState({\n        temp: tempList\n      });\n    };\n\n    this.activateInput = idx => {\n      let tempList = [];\n      tempList = this.state.list;\n      tempList[idx].update = true;\n      this.setState({\n        list: tempList\n      });\n      this.setState({\n        temp: tempList\n      });\n    };\n\n    this.updateTask = idx => {\n      let tempList = [];\n      tempList = this.state.list;\n      let temptask = {\n        task: this.state.newtask,\n        iscomplete: false,\n        update: false\n      };\n      tempList[idx] = temptask;\n      this.setState({\n        list: tempList\n      });\n      this.setState({\n        temp: tempList\n      });\n      this.setState({\n        newtask: \"\"\n      });\n    };\n\n    this.state = {\n      list: [],\n      newtask: \"\",\n      show: \"All\",\n      temp: []\n    };\n  }\n  /*Get task from the browser and set it to a newtask  state*/\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"new-task\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: this.state.newtask,\n      onChange: this.inputData,\n      placeholder: \"enter a new task\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, \"Add \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, this.state.temp.map((e, idx) => {\n      let task = !e.iscomplete ? \"complete\" : \"undo\";\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: idx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: task,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 19\n        }\n      }, e.task), /*#__PURE__*/React.createElement(\"span\", {\n        className: task,\n        onClick: () => this.activateInput(idx),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }\n      }, e.task), e.update === true ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 41\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n        onChange: this.inputData,\n        type: \"text\",\n        placeholder: \"enter data to update\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 47\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.updateTask(idx),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 23\n        }\n      }, \"update\")) : '', /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.isComplete(idx),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 19\n        }\n      }, \" \", task, \" \"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.deleteTask(idx),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 19\n        }\n      }, \" delete \"), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 19\n        }\n      }));\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sort-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, \"Show:\", /*#__PURE__*/React.createElement(\"button\", {\n      className: this.state.show === \"All\" ? \"active\" : \"\",\n      onClick: () => {\n        this.changeLinkColor(\"All\");\n        this.showAll();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, \"All\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: this.state.show === \"Active\" ? \"active\" : \"\",\n      onClick: () => {\n        this.changeLinkColor(\"Active\");\n        this.showActive();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, \"Active\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: this.state.show === \"Completed\" ? \"active\" : \"\",\n      onClick: () => {\n        this.changeLinkColor(\"Completed\");\n        this.showCompleted();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, \"Completed\"))));\n  }\n\n}","map":{"version":3,"sources":["/home/amt/Desktop/ToDoCRUD_With_React/crud-with-react/src/components/App.js"],"names":["React","App","Component","constructor","inputData","event","setState","newtask","target","value","addTask","tempList","state","list","temptask","task","iscomplete","update","push","temp","deleteTask","givenIndex","splice","changeLinkColor","givenLinks","show","isComplete","showAll","showActive","filter","element","showCompleted","activateInput","idx","updateTask","render","map","e"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./css/to-do-list-css.css\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      list: [],\n      newtask: \"\",\n      show: \"All\",\n      temp: [],\n    };\n  }\n  /*Get task from the browser and set it to a newtask  state*/\n  inputData = event => this.setState({ newtask: event.target.value });\n  /*Get a new task from state and put that one to the list.*/\n  addTask = () => {\n    let tempList = [];\n    tempList = this.state.list;\n    let temptask = { task: this.state.newtask, iscomplete: false, update:false };\n    tempList.push(temptask);\n    this.setState({ list: tempList });\n    this.setState({ temp: tempList });\n    this.setState({ newtask: \"\" });\n  };\n  /*Delete task from the list*/\n  deleteTask = givenIndex => {\n    let tempList = [];\n    tempList = this.state.list;\n    tempList.splice(givenIndex, 1);\n    this.setState({ list: tempList });\n    this.setState({ temp: tempList });\n  };\n  /*Change color of links when link is clicked */\n  changeLinkColor = givenLinks => this.setState({ show: givenLinks });\n  /*Change color of task when it has done*/\n  isComplete = givenIndex => {\n    let tempList = [];\n    tempList = this.state.list;\n    tempList[givenIndex].iscomplete = !tempList[givenIndex].iscomplete;\n    this.setState({ list: tempList });\n    this.setState({ temp: tempList });\n  };\n  /*Show all tasks that means showing completed and incompleted tasks */\n  showAll = () => {\n    this.setState({temp:this.state.list });\n  }\n  /*Show active tasks*/\n  showActive = () => {\n    let tempList = [];\n    tempList = this.state.list;\n    tempList = tempList.filter(element => element.iscomplete !== true);\n    this.setState({ temp: tempList })\n  };\n  /*Show inactive tasks*/\n  showCompleted = () => {\n    let tempList = [];\n    tempList = this.state.list;\n    tempList = tempList.filter(element => element.iscomplete !== false);\n    this.setState({ temp: tempList })\n  };\n  /*Change property of task (update:false to true) when task is clicked*/\n  activateInput = (idx) => {\n    let tempList = [];\n    tempList = this.state.list;\n    tempList[idx].update =true;\n    this.setState({ list: tempList });\n    this.setState({ temp: tempList });\n  }\n  /*Update specific task based on index*/\n  updateTask = (idx) => {\n    let tempList = [];\n    tempList = this.state.list;\n    let temptask = { task: this.state.newtask, iscomplete: false, update:false };\n    tempList[idx] = temptask;\n    this.setState({ list: tempList });\n    this.setState({ temp: tempList });\n    this.setState({ newtask: \"\" });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"new-task\">\n          <input\n            value={this.state.newtask}\n            onChange={this.inputData}\n            placeholder=\"enter a new task\"\n            required\n          />\n          <button onClick={this.addTask}>Add </button>\n        </div>\n        <div className=\"list-box\">\n          <ul>\n            {this.state.temp.map((e, idx) => {\n              let task = !e.iscomplete ? \"complete\" : \"undo\";\n              return (\n                <li key={idx}>\n                  <span className={task} >{e.task}</span>\n                    <span  className={task} onClick = { () => this.activateInput(idx) }>{e.task}</span>\n                    {\n                      e.update===true ? <div> <input onChange = {this.inputData} type='text' placeholder='enter data to update'/>\n                      <button onClick = { () => this.updateTask(idx)}>update</button></div>: ''\n                     }\n                  <br />\n                  <button onClick={() => this.isComplete(idx)}> {task} </button>\n                  <button onClick={() => this.deleteTask(idx)}> delete </button>\n                  <hr />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n        <div className='sort-buttons'>\n          <h3>\n            Show:\n            <button\n              className={this.state.show === \"All\" ? \"active\" : \"\"}\n              onClick={() => {this.changeLinkColor(\"All\"); this.showAll()}}\n            >\n              All\n            </button>\n            <button\n              className={this.state.show === \"Active\" ? \"active\" : \"\"}\n              onClick={() => {\n                this.changeLinkColor(\"Active\");\n                this.showActive();\n              }}\n            >\n              Active\n            </button>\n            <button\n              className={this.state.show === \"Completed\" ? \"active\" : \"\"}\n              onClick={() => {\n                this.changeLinkColor(\"Completed\");\n                this.showCompleted();\n              }}\n            >\n              Completed\n            </button>\n          </h3>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}